
## Anhang 2 {.appendix}

Um mehrere Nutzer von einer CSV zu importieren, können wir die QFieldCloud Python API verwenden. 

Das `qfieldcloud-sdk` ist der offizielle Client, um sich mit der [QFieldCloud API](https://docs.qfield.org/reference/qfieldcloud/api/) zu verbinden, entweder als Python-Modul, oder direkt von der Kommandozeile.

Weitere Infos: <https://opengisch.github.io/qfieldcloud-sdk-python/>

Installation: `pip install qfieldcloud-sdk`

### Nutzer der Organisation hinzufügen


Um mehrere Mitglieder unserer Organisation hinzuzufügen, braucht es eine CSV Datei mit folgender Struktur:

```{.text}
username,org_role,proj_role
ninja_1,member,reader
ninja_2,member,editor
ninja_3,admin,manager
ninja_4,member,reporter
```

Hier der Python code für das Importieren via CSV:


```{.python}
import requests, csv
from qfieldcloud_sdk import sdk

client = sdk.Client(
    url="https://app.qfield.cloud/api/v1/"
)
client.login(username='myuser', password='mypassword')

def read_csv(csv_path: str, organization: str, project_id: str, is_public: bool):
    with open(csv_path, mode="r", newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for user in reader:
            try:
                client.add_organization_member(
                    organization, user["username"], user["org_role"], is_public
                )
                print(
                    f"Added member {user['username']} with role {user['org_role']} in {organization}"
                )
            except requests.exceptions.RequestException:
                print("Oops!")


if __name__ == "__main__":
    organization = "ZHAW"
    is_public = False
    csv_path = 'path/to/files/surveyors.csv'
    read_csv(csv_path, organization, project_id, is_public)

```



### Nutzer einem Projekt hinzufügen

Für das Hinzufügen von Nutzer zu einem Projekt braucht es eine CSV Datei mit folgender Struktur:

```{.text}
organization,project_id,username,org_role,proj_role
NIBIO,f9b47cb1-ae8b-4f12-b95d-05c189f9a72c,ninja_1,member,reader
NIBIO,f9b47cb1-ae8b-4f12-b95d-05c189f9a72c,ninja_2,member,editor
NIBIO,f9b47cb1-ae8b-4f12-b95d-05c189f9a72c,ninja_3,admin,manager
NIBIO,f9b47cb1-ae8b-4f12-b95d-05c189f9a72c,ninja_4,member,reporter
```

Nun kann folgender Python Code ausgeführt werden:

```{.python}
import requests, csv
from qfieldcloud_sdk import sdk

client = sdk.Client(
    url="https://qcloud.nibio.no/api/v1/"
)
client.login(username='myuser', password='mypassword')  #working

def read_csv(csv_path: str, organization: str, project_id: str, is_public: bool):
    with open(csv_path, mode="r", newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for user in reader:
            try:
                client.add_organization_member(
                    user["organization"], user["username"], user["org_role"], is_public
                )
                print(
                    f"Added member {user['username']} with role {user['org_role']} in {user["organization"]}"
                )
                client.add_project_collaborator(
                    user["project_id"], user["username"], user["proj_role"]
                )
                print(
                    f"Added collaborator {user['username']} with role {user['proj_role']} to project ID {user["project_id"]}"
                )
            except requests.exceptions.RequestException:
                print("Oops!")


if __name__ == "__main__":
    is_public = False
    csv_path = 'path/to/files/surveyors.csv'
    read_csv(csv_path, is_public)

```

